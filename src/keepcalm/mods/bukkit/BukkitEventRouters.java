package keepcalm.mods.bukkit;

import keepcalm.mods.bukkit.BukkitEventRouter;
import org.bukkit.Bukkit;
import org.bukkit.Instrument;
import org.bukkit.Note;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.block.BlockState;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.event.*;
import org.bukkit.event.block.*;
import org.bukkit.event.enchantment.*;
import org.bukkit.event.entity.*;
import org.bukkit.event.hanging.*;
import org.bukkit.event.inventory.*;
import org.bukkit.event.painting.*;
import org.bukkit.event.player.*;
import org.bukkit.event.server.*;
import org.bukkit.event.vehicle.*;
import org.bukkit.event.weather.*;
import org.bukkit.event.world.*;
import org.bukkit.inventory.InventoryView;
import org.bukkit.inventory.ItemStack;
import org.bukkit.util.Vector;

import java.util.Map;

public class BukkitEventRouters {
    /*
    public static BlockCaller Block = new BlockCaller();
    public static EnchantmentCaller Enchantment = new EnchantmentCaller();
    public static EntityCaller Entity = new EntityCaller();
    public static HangingCaller Hanging = new HangingCaller();
    public static InventoryCaller Inventory = new InventoryCaller();
    public static PaintingCaller Painting = new PaintingCaller();
    public static PlayerCaller Player = new PlayerCaller();
    public static ServerCaller Server = new ServerCaller();
    public static VehicleCaller Vehicle = new VehicleCaller();
    public static WeatherCaller Weather = new WeatherCaller();
    public static WorldCaller World = new WorldCaller();

    public static class BlockCaller {
        public class BlockBreakCaller extends BukkitEventRouter<BlockBreakEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockBreakEvent> prep, org.bukkit.block.Block b, org.bukkit.entity.Player p) { BlockBreakEvent event = new BlockBreakEvent(b,p); callEvent(event, initiallyDisabled, prep); } } public BlockBreakCaller BlockBreakCaller = new BlockBreakCaller();
        public class BlockBurnCaller extends BukkitEventRouter<BlockBurnEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockBurnEvent> prep, org.bukkit.block.Block b) { BlockBurnEvent event = new BlockBurnEvent(b); callEvent(event, initiallyDisabled, prep); } } public BlockBurnCaller BlockBurn = new BlockBurnCaller();
        public class BlockCanBuildCaller extends BukkitEventRouter<BlockCanBuildEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockCanBuildEvent> prep, org.bukkit.block.Block b, int material, boolean canBuild) { BlockCanBuildEvent event = new BlockCanBuildEvent(b,material,canBuild); callEvent(event, initiallyDisabled, prep); } } public BlockCanBuildCaller BlockCanBuild = new BlockCanBuildCaller();
        public class BlockDamageCaller extends BukkitEventRouter<BlockDamageEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockDamageEvent> prep, org.bukkit.entity.Player player, org.bukkit.block.Block block, ItemStack itemInHand, final boolean instaBreak) { BlockDamageEvent event = new BlockDamageEvent(player,block,itemInHand,instaBreak); callEvent(event, initiallyDisabled, prep); } } public BlockDamageCaller BlockDamage = new BlockDamageCaller();
        public class BlockDispenseCaller extends BukkitEventRouter<BlockDispenseEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockDispenseEvent> prep, Block block, ItemStack dispensed, Vector velocity) { BlockDispenseEvent event = new BlockDispenseEvent(block,dispensed,velocity); callEvent(event, initiallyDisabled, prep); } } public BlockDispenseCaller BlockDispense = new BlockDispenseCaller();
        public class BlockExpCaller extends BukkitEventRouter<BlockExpEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockExpEvent> prep, org.bukkit.block.Block block, int exp) { BlockExpEvent event = new BlockExpEvent(block,exp); callEvent(event, initiallyDisabled, prep); } } public BlockExpCaller BlockExp = new BlockExpCaller();
        public class BlockFadeCaller extends BukkitEventRouter<BlockFadeEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockFadeEvent> prep, org.bukkit.block.Block block, BlockState newState) { BlockFadeEvent event = new BlockFadeEvent(block,newState); callEvent(event, initiallyDisabled, prep); } } public BlockFadeCaller BlockFade = new BlockFadeCaller();
        public class BlockFormCaller extends BukkitEventRouter<BlockFormEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockFormEvent> prep, org.bukkit.block.Block block, BlockState newState) { BlockFormEvent event = new BlockFormEvent(block,newState); callEvent(event, initiallyDisabled, prep); } } public BlockFormCaller BlockForm = new BlockFormCaller();
        public class BlockFromToCaller extends BukkitEventRouter<BlockFromToEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockFromToEvent> prep, org.bukkit.block.Block block, BlockFace face) { BlockFromToEvent event = new BlockFromToEvent(block,face); callEvent(event, initiallyDisabled, prep); } } public BlockFromToCaller BlockFromTo = new BlockFromToCaller();
        public class BlockGrowCaller extends BukkitEventRouter<BlockGrowEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockGrowEvent> prep, org.bukkit.block.Block block, BlockState newState) { BlockGrowEvent event = new BlockGrowEvent(block, newState); callEvent(event, initiallyDisabled, prep); } } public BlockGrowCaller BlockGrow = new BlockGrowCaller();
        public class BlockIgniteCaller extends BukkitEventRouter<BlockIgniteEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockIgniteEvent> prep, org.bukkit.block.Block block, BlockIgniteEvent.IgniteCause cause, Player player) { BlockIgniteEvent event = new BlockIgniteEvent(block, cause, player); callEvent(event, initiallyDisabled, prep); } } public BlockIgniteCaller BlockIgnite = new BlockIgniteCaller();
        public class BlockPhysicsCaller extends BukkitEventRouter<BlockPhysicsEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockPhysicsEvent> prep, org.bukkit.block.Block block, int changed) { BlockPhysicsEvent event = new BlockPhysicsEvent(block, changed); callEvent(event, initiallyDisabled, prep); } } public BlockPhysicsCaller BlockPhysics = new BlockPhysicsCaller();
        public class BlockPistonExtendCaller extends BukkitEventRouter<BlockPistonExtendEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockPistonExtendEvent> prep, org.bukkit.block.Block block, int length, BlockFace direction) { BlockPistonExtendEvent event = new BlockPistonExtendEvent(block, length, direction); callEvent(event, initiallyDisabled, prep); } } public BlockPistonExtendCaller BlockPistonExtend = new BlockPistonExtendCaller();
        public class BlockPistonRetractCaller extends BukkitEventRouter<BlockPistonRetractEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockPistonRetractEvent> prep, org.bukkit.block.Block block, BlockFace direction) { BlockPistonRetractEvent event = new BlockPistonRetractEvent(block, direction); callEvent(event, initiallyDisabled, prep); } } public BlockPistonRetractCaller BlockPistonRetract = new BlockPistonRetractCaller();
        public class BlockPlaceCaller extends BukkitEventRouter<BlockPlaceEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockPlaceEvent> prep, org.bukkit.block.Block placedBlock, BlockState replacedBlockState, org.bukkit.block.Block placedAgainst, ItemStack itemInHand, Player player, boolean canBuild) { BlockPlaceEvent event = new BlockPlaceEvent(placedBlock,replacedBlockState,placedAgainst,itemInHand,player,canBuild); callEvent(event, initiallyDisabled, prep); } } public BlockPlaceCaller BlockPlace = new BlockPlaceCaller();
        public class BlockRedstoneCaller extends BukkitEventRouter<BlockRedstoneEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockRedstoneEvent> prep, org.bukkit.block.Block block, int oldCurrent, int newCurrent) { BlockRedstoneEvent event = new BlockRedstoneEvent(block,oldCurrent,newCurrent); callEvent(event, initiallyDisabled, prep); } } public BlockRedstoneCaller BlockRedstone = new BlockRedstoneCaller();
        public class BlockSpreadCaller extends BukkitEventRouter<BlockSpreadEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BlockSpreadEvent> prep, org.bukkit.block.Block block, org.bukkit.block.Block source, BlockState newState) { BlockSpreadEvent event = new BlockSpreadEvent(block,source,newState); callEvent(event, initiallyDisabled, prep); } } public BlockSpreadCaller BlockSpread = new BlockSpreadCaller();
        public class EntityBlockFormCaller extends BukkitEventRouter<EntityBlockFormEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityBlockFormEvent> prep, org.bukkit.entity.Entity entity, org.bukkit.block.Block block, BlockState blockstate) { EntityBlockFormEvent event = new EntityBlockFormEvent(entity,block,blockstate); callEvent(event, initiallyDisabled, prep); } } public EntityBlockFormCaller EntityBlockForm = new EntityBlockFormCaller();
        public class LeavesDecayCaller extends BukkitEventRouter<LeavesDecayEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<LeavesDecayEvent> prep, org.bukkit.block.Block block) { LeavesDecayEvent event = new LeavesDecayEvent(block); callEvent(event, initiallyDisabled, prep); } } public LeavesDecayCaller LeavesDecay = new LeavesDecayCaller();
        public class NotePlayCaller extends BukkitEventRouter<NotePlayEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<NotePlayEvent> prep, org.bukkit.block.Block block, Instrument instrument, Note note) { NotePlayEvent event = new NotePlayEvent(block,instrument,note); callEvent(event, initiallyDisabled, prep); } } public NotePlayCaller NotePlay = new NotePlayCaller();
        public class SignChangeCaller extends BukkitEventRouter<SignChangeEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<SignChangeEvent> prep, org.bukkit.block.Block block, Player player, String[] lines) { SignChangeEvent event = new SignChangeEvent(block,player,lines); callEvent(event, initiallyDisabled, prep); } } public SignChangeCaller SignChange = new SignChangeCaller();
    }

    public static class EnchantmentCaller { }
        public class EnchantItemCaller extends BukkitEventRouter<EnchantItemEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EnchantItemEvent> prep, final Player enchanter, InventoryView view, Block table, ItemStack item, int level, Map<org.bukkit.enchantments.Enchantment, Integer> enchants, int button) { EnchantItemEvent event = new EnchantItemEvent(enchanter, view, table, item, level, enchants, button); callEvent(event, initiallyDisabled, prep); } } public EnchantItemCaller EnchantItem = new EnchantItemCaller();
        public class PrepareItemEnchantCaller extends BukkitEventRouter<PrepareItemEnchantEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PrepareItemEnchantEvent> prep, Player enchanter, InventoryView view, Block table, ItemStack item, int[] levelsOffered, int bonus) { PrepareItemEnchantEvent event = new PrepareItemEnchantEvent(enchanter,view,table,item,levelsOffered,bonus); callEvent(event, initiallyDisabled, prep); } } public PrepareItemEnchantCaller PrepareItemEnchant = new PrepareItemEnchantCaller();

    public static class EntityCaller {
        public class CreatureSpawnCaller extends BukkitEventRouter<CreatureSpawnEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<CreatureSpawnEvent> prep, int i, int j, int k, int l, int m, int n) { CreatureSpawnEvent event = new CreatureSpawnEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public CreatureSpawnCaller CreatureSpawn = new CreatureSpawnCaller();
        public class CreeperPowerCaller extends BukkitEventRouter<CreeperPowerEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<CreeperPowerEvent> prep, int i, int j, int k, int l, int m, int n) { CreeperPowerEvent event = new CreeperPowerEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public CreeperPowerCaller CreeperPower = new CreeperPowerCaller();
        public class EntityBreakDoorCaller extends BukkitEventRouter<EntityBreakDoorEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityBreakDoorEvent> prep, int i, int j, int k, int l, int m, int n) { EntityBreakDoorEvent event = new EntityBreakDoorEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityBreakDoorCaller EntityBreakDoor = new EntityBreakDoorCaller();
        public class EntityChangeBlockCaller extends BukkitEventRouter<EntityChangeBlockEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityChangeBlockEvent> prep, int i, int j, int k, int l, int m, int n) { EntityChangeBlockEvent event = new EntityChangeBlockEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityChangeBlockCaller EntityChangeBlock = new EntityChangeBlockCaller();
        public class EntityCombustByBlockCaller extends BukkitEventRouter<EntityCombustByBlockEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityCombustByBlockEvent> prep, int i, int j, int k, int l, int m, int n) { EntityCombustByBlockEvent event = new EntityCombustByBlockEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityCombustByBlockCaller EntityCombustByBlock = new EntityCombustByBlockCaller();
        public class EntityCombustByEntityCaller extends BukkitEventRouter<EntityCombustByEntityEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityCombustByEntityEvent> prep, int i, int j, int k, int l, int m, int n) { EntityCombustByEntityEvent event = new EntityCombustByEntityEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityCombustByEntityCaller EntityCombustByEntity = new EntityCombustByEntityCaller();
        public class EntityCombustCaller extends BukkitEventRouter<EntityCombustEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityCombustEvent> prep, int i, int j, int k, int l, int m, int n) { EntityCombustEvent event = new EntityCombustEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityCombustCaller EntityCombust = new EntityCombustCaller();
        public class EntityCreatePortalCaller extends BukkitEventRouter<EntityCreatePortalEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityCreatePortalEvent> prep, int i, int j, int k, int l, int m, int n) { EntityCreatePortalEvent event = new EntityCreatePortalEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityCreatePortalCaller EntityCreatePortal = new EntityCreatePortalCaller();
        public class EntityDamageByBlockCaller extends BukkitEventRouter<EntityDamageByBlockEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityDamageByBlockEvent> prep, int i, int j, int k, int l, int m, int n) { EntityDamageByBlockEvent event = new EntityDamageByBlockEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityDamageByBlockCaller EntityDamageByBlock = new EntityDamageByBlockCaller();
        public class EntityDamageByEntityCaller extends BukkitEventRouter<EntityDamageByEntityEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityDamageByEntityEvent> prep, int i, int j, int k, int l, int m, int n) { EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityDamageByEntityCaller EntityDamageByEntity = new EntityDamageByEntityCaller();
        public class EntityDamageCaller extends BukkitEventRouter<EntityDamageEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityDamageEvent> prep, int i, int j, int k, int l, int m, int n) { EntityDamageEvent event = new EntityDamageEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityDamageCaller EntityDamage = new EntityDamageCaller();
        public class EntityDeathCaller extends BukkitEventRouter<EntityDeathEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityDeathEvent> prep, int i, int j, int k, int l, int m, int n) { EntityDeathEvent event = new EntityDeathEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityDeathCaller EntityDeath = new EntityDeathCaller();
        public class EntityExplodeCaller extends BukkitEventRouter<EntityExplodeEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityExplodeEvent> prep, int i, int j, int k, int l, int m, int n) { EntityExplodeEvent event = new EntityExplodeEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityExplodeCaller EntityExplode = new EntityExplodeCaller();
        public class EntityInteractCaller extends BukkitEventRouter<EntityInteractEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityInteractEvent> prep, int i, int j, int k, int l, int m, int n) { EntityInteractEvent event = new EntityInteractEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityInteractCaller EntityInteract = new EntityInteractCaller();
        public class EntityPortalEnterCaller extends BukkitEventRouter<EntityPortalEnterEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityPortalEnterEvent> prep, int i, int j, int k, int l, int m, int n) { EntityPortalEnterEvent event = new EntityPortalEnterEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityPortalEnterCaller EntityPortalEnter = new EntityPortalEnterCaller();
        public class EntityPortalCaller extends BukkitEventRouter<EntityPortalEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityPortalEvent> prep, int i, int j, int k, int l, int m, int n) { EntityPortalEvent event = new EntityPortalEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityPortalCaller EntityPortal = new EntityPortalCaller();
        public class EntityPortalExitCaller extends BukkitEventRouter<EntityPortalExitEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityPortalExitEvent> prep, int i, int j, int k, int l, int m, int n) { EntityPortalExitEvent event = new EntityPortalExitEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityPortalExitCaller EntityPortalExit = new EntityPortalExitCaller();
        public class EntityRegainHealthCaller extends BukkitEventRouter<EntityRegainHealthEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityRegainHealthEvent> prep, int i, int j, int k, int l, int m, int n) { EntityRegainHealthEvent event = new EntityRegainHealthEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityRegainHealthCaller EntityRegainHealth = new EntityRegainHealthCaller();
        public class EntityShootBowCaller extends BukkitEventRouter<EntityShootBowEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityShootBowEvent> prep, int i, int j, int k, int l, int m, int n) { EntityShootBowEvent event = new EntityShootBowEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityShootBowCaller EntityShootBow = new EntityShootBowCaller();
        public class EntityTameCaller extends BukkitEventRouter<EntityTameEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityTameEvent> prep, int i, int j, int k, int l, int m, int n) { EntityTameEvent event = new EntityTameEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityTameCaller EntityTame = new EntityTameCaller();
        public class EntityTargetCaller extends BukkitEventRouter<EntityTargetEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityTargetEvent> prep, int i, int j, int k, int l, int m, int n) { EntityTargetEvent event = new EntityTargetEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityTargetCaller EntityTarget = new EntityTargetCaller();
        public class EntityTargetLivingEntityCaller extends BukkitEventRouter<EntityTargetLivingEntityEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityTargetLivingEntityEvent> prep, int i, int j, int k, int l, int m, int n) { EntityTargetLivingEntityEvent event = new EntityTargetLivingEntityEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityTargetLivingEntityCaller EntityTargetLivingEntity = new EntityTargetLivingEntityCaller();
        public class EntityTeleportCaller extends BukkitEventRouter<EntityTeleportEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<EntityTeleportEvent> prep, int i, int j, int k, int l, int m, int n) { EntityTeleportEvent event = new EntityTeleportEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public EntityTeleportCaller EntityTeleport = new EntityTeleportCaller();
        public class ExpBottleCaller extends BukkitEventRouter<ExpBottleEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ExpBottleEvent> prep, int i, int j, int k, int l, int m, int n) { ExpBottleEvent event = new ExpBottleEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ExpBottleCaller ExpBottle = new ExpBottleCaller();
        public class ExplosionPrimeCaller extends BukkitEventRouter<ExplosionPrimeEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ExplosionPrimeEvent> prep, int i, int j, int k, int l, int m, int n) { ExplosionPrimeEvent event = new ExplosionPrimeEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ExplosionPrimeCaller ExplosionPrime = new ExplosionPrimeCaller();
        public class FoodLevelChangeCaller extends BukkitEventRouter<FoodLevelChangeEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<FoodLevelChangeEvent> prep, int i, int j, int k, int l, int m, int n) { FoodLevelChangeEvent event = new FoodLevelChangeEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public FoodLevelChangeCaller FoodLevelChange = new FoodLevelChangeCaller();
        public class ItemDespawnCaller extends BukkitEventRouter<ItemDespawnEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ItemDespawnEvent> prep, int i, int j, int k, int l, int m, int n) { ItemDespawnEvent event = new ItemDespawnEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ItemDespawnCaller ItemDespawn = new ItemDespawnCaller();
        public class ItemSpawnCaller extends BukkitEventRouter<ItemSpawnEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ItemSpawnEvent> prep, int i, int j, int k, int l, int m, int n) { ItemSpawnEvent event = new ItemSpawnEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ItemSpawnCaller ItemSpawn = new ItemSpawnCaller();
        public class PigZapCaller extends BukkitEventRouter<PigZapEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PigZapEvent> prep, int i, int j, int k, int l, int m, int n) { PigZapEvent event = new PigZapEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PigZapCaller PigZap = new PigZapCaller();
        public class PlayerDeathCaller extends BukkitEventRouter<PlayerDeathEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerDeathEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerDeathEvent event = new PlayerDeathEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerDeathCaller PlayerDeath = new PlayerDeathCaller();
        public class PotionSplashCaller extends BukkitEventRouter<PotionSplashEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PotionSplashEvent> prep, int i, int j, int k, int l, int m, int n) { PotionSplashEvent event = new PotionSplashEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PotionSplashCaller PotionSplash = new PotionSplashCaller();
        public class ProjectileHitCaller extends BukkitEventRouter<ProjectileHitEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ProjectileHitEvent> prep, int i, int j, int k, int l, int m, int n) { ProjectileHitEvent event = new ProjectileHitEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ProjectileHitCaller ProjectileHit = new ProjectileHitCaller();
        public class ProjectileLaunchCaller extends BukkitEventRouter<ProjectileLaunchEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ProjectileLaunchEvent> prep, int i, int j, int k, int l, int m, int n) { ProjectileLaunchEvent event = new ProjectileLaunchEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ProjectileLaunchCaller ProjectileLaunch = new ProjectileLaunchCaller();
        public class SheepDyeWoolCaller extends BukkitEventRouter<SheepDyeWoolEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<SheepDyeWoolEvent> prep, int i, int j, int k, int l, int m, int n) { SheepDyeWoolEvent event = new SheepDyeWoolEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public SheepDyeWoolCaller SheepDyeWool = new SheepDyeWoolCaller();
        public class SheepRegrowWoolCaller extends BukkitEventRouter<SheepRegrowWoolEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<SheepRegrowWoolEvent> prep, int i, int j, int k, int l, int m, int n) { SheepRegrowWoolEvent event = new SheepRegrowWoolEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public SheepRegrowWoolCaller SheepRegrowWool = new SheepRegrowWoolCaller();
        public class SlimeSplitCaller extends BukkitEventRouter<SlimeSplitEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<SlimeSplitEvent> prep, int i, int j, int k, int l, int m, int n) { SlimeSplitEvent event = new SlimeSplitEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public SlimeSplitCaller SlimeSplit = new SlimeSplitCaller();
    }

    public static class HangingCaller {
        public class HangingBreakByEntityCaller extends BukkitEventRouter<HangingBreakByEntityEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<HangingBreakByEntityEvent> prep, int i, int j, int k, int l, int m, int n) { HangingBreakByEntityEvent event = new HangingBreakByEntityEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public HangingBreakByEntityCaller HangingBreakByEntity = new HangingBreakByEntityCaller();
        public class HangingBreakCaller extends BukkitEventRouter<HangingBreakEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<HangingBreakEvent> prep, int i, int j, int k, int l, int m, int n) { HangingBreakEvent event = new HangingBreakEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public HangingBreakCaller HangingBreak = new HangingBreakCaller();
        public class HangingPlaceCaller extends BukkitEventRouter<HangingPlaceEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<HangingPlaceEvent> prep, int i, int j, int k, int l, int m, int n) { HangingPlaceEvent event = new HangingPlaceEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public HangingPlaceCaller HangingPlace = new HangingPlaceCaller();
    }

    public static class InventoryCaller {
        public class BrewCaller extends BukkitEventRouter<BrewEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<BrewEvent> prep, int i, int j, int k, int l, int m, int n) { BrewEvent event = new BrewEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public BrewCaller Brew = new BrewCaller();
        public class CraftItemCaller extends BukkitEventRouter<CraftItemEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<CraftItemEvent> prep, int i, int j, int k, int l, int m, int n) { CraftItemEvent event = new CraftItemEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public CraftItemCaller CraftItem = new CraftItemCaller();
        public class FurnaceBurnCaller extends BukkitEventRouter<FurnaceBurnEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<FurnaceBurnEvent> prep, int i, int j, int k, int l, int m, int n) { FurnaceBurnEvent event = new FurnaceBurnEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public FurnaceBurnCaller FurnaceBurn = new FurnaceBurnCaller();
        public class FurnaceExtractCaller extends BukkitEventRouter<FurnaceExtractEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<FurnaceExtractEvent> prep, int i, int j, int k, int l, int m, int n) { FurnaceExtractEvent event = new FurnaceExtractEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public FurnaceExtractCaller FurnaceExtract = new FurnaceExtractCaller();
        public class FurnaceSmeltCaller extends BukkitEventRouter<FurnaceSmeltEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<FurnaceSmeltEvent> prep, int i, int j, int k, int l, int m, int n) { FurnaceSmeltEvent event = new FurnaceSmeltEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public FurnaceSmeltCaller FurnaceSmelt = new FurnaceSmeltCaller();
        public class InventoryClickCaller extends BukkitEventRouter<InventoryClickEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<InventoryClickEvent> prep, int i, int j, int k, int l, int m, int n) { InventoryClickEvent event = new InventoryClickEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public InventoryClickCaller InventoryClick = new InventoryClickCaller();
        public class InventoryCloseCaller extends BukkitEventRouter<InventoryCloseEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<InventoryCloseEvent> prep, int i, int j, int k, int l, int m, int n) { InventoryCloseEvent event = new InventoryCloseEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public InventoryCloseCaller InventoryClose = new InventoryCloseCaller();
        public class InventoryOpenCaller extends BukkitEventRouter<InventoryOpenEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<InventoryOpenEvent> prep, int i, int j, int k, int l, int m, int n) { InventoryOpenEvent event = new InventoryOpenEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public InventoryOpenCaller InventoryOpen = new InventoryOpenCaller();
        public class InventoryType { }
        public class PrepareItemCraftCaller extends BukkitEventRouter<PrepareItemCraftEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PrepareItemCraftEvent> prep, int i, int j, int k, int l, int m, int n) { PrepareItemCraftEvent event = new PrepareItemCraftEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PrepareItemCraftCaller PrepareItemCraft = new PrepareItemCraftCaller();
    }

    public static class PaintingCaller {
        public class PaintingBreakByEntityCaller extends BukkitEventRouter<PaintingBreakByEntityEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PaintingBreakByEntityEvent> prep, int i, int j, int k, int l, int m, int n) { PaintingBreakByEntityEvent event = new PaintingBreakByEntityEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PaintingBreakByEntityCaller PaintingBreakByEntity = new PaintingBreakByEntityCaller();
        public class PaintingBreakCaller extends BukkitEventRouter<PaintingBreakEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PaintingBreakEvent> prep, int i, int j, int k, int l, int m, int n) { PaintingBreakEvent event = new PaintingBreakEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PaintingBreakCaller PaintingBreak = new PaintingBreakCaller();
        public class PaintingPlaceCaller extends BukkitEventRouter<PaintingPlaceEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PaintingPlaceEvent> prep, int i, int j, int k, int l, int m, int n) { PaintingPlaceEvent event = new PaintingPlaceEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PaintingPlaceCaller PaintingPlace = new PaintingPlaceCaller();
    }

    public static class PlayerCaller {
        public class AsyncPlayerChatCaller extends BukkitEventRouter<AsyncPlayerChatEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<AsyncPlayerChatEvent> prep, int i, int j, int k, int l, int m, int n) { AsyncPlayerChatEvent event = new AsyncPlayerChatEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public AsyncPlayerChatCaller AsyncPlayerChat = new AsyncPlayerChatCaller();
        public class AsyncPlayerPreLoginCaller extends BukkitEventRouter<AsyncPlayerPreLoginEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<AsyncPlayerPreLoginEvent> prep, int i, int j, int k, int l, int m, int n) { AsyncPlayerPreLoginEvent event = new AsyncPlayerPreLoginEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public AsyncPlayerPreLoginCaller AsyncPlayerPreLogin = new AsyncPlayerPreLoginCaller();
        public class PlayerAnimationCaller extends BukkitEventRouter<PlayerAnimationEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerAnimationEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerAnimationEvent event = new PlayerAnimationEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerAnimationCaller PlayerAnimation = new PlayerAnimationCaller();
        public class PlayerAnimationType { }
        public class PlayerBedEnterCaller extends BukkitEventRouter<PlayerBedEnterEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerBedEnterEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerBedEnterEvent event = new PlayerBedEnterEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerBedEnterCaller PlayerBedEnter = new PlayerBedEnterCaller();
        public class PlayerBedLeaveCaller extends BukkitEventRouter<PlayerBedLeaveEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerBedLeaveEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerBedLeaveEvent event = new PlayerBedLeaveEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerBedLeaveCaller PlayerBedLeave = new PlayerBedLeaveCaller();
        public class PlayerBucketEmptyCaller extends BukkitEventRouter<PlayerBucketEmptyEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerBucketEmptyEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerBucketEmptyEvent event = new PlayerBucketEmptyEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerBucketEmptyCaller PlayerBucketEmpty = new PlayerBucketEmptyCaller();
        public class PlayerBucketCaller extends BukkitEventRouter<PlayerBucketEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerBucketEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerBucketEvent event = new PlayerBucketEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerBucketCaller PlayerBucket = new PlayerBucketCaller();
        public class PlayerBucketFillCaller extends BukkitEventRouter<PlayerBucketFillEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerBucketFillEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerBucketFillEvent event = new PlayerBucketFillEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerBucketFillCaller PlayerBucketFill = new PlayerBucketFillCaller();
        public class PlayerChangedWorldCaller extends BukkitEventRouter<PlayerChangedWorldEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerChangedWorldEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerChangedWorldEvent event = new PlayerChangedWorldEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerChangedWorldCaller PlayerChangedWorld = new PlayerChangedWorldCaller();
        public class PlayerChannelCaller extends BukkitEventRouter<PlayerChannelEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerChannelEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerChannelEvent event = new PlayerChannelEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerChannelCaller PlayerChannel = new PlayerChannelCaller();
        public class PlayerChatCaller extends BukkitEventRouter<PlayerChatEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerChatEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerChatEvent event = new PlayerChatEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerChatCaller PlayerChat = new PlayerChatCaller();
        public class PlayerChatTabCompleteCaller extends BukkitEventRouter<PlayerChatTabCompleteEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerChatTabCompleteEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerChatTabCompleteEvent event = new PlayerChatTabCompleteEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerChatTabCompleteCaller PlayerChatTabComplete = new PlayerChatTabCompleteCaller();
        public class PlayerCommandPreprocessCaller extends BukkitEventRouter<PlayerCommandPreprocessEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerCommandPreprocessEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerCommandPreprocessCaller PlayerCommandPreprocess = new PlayerCommandPreprocessCaller();
        public class PlayerDropItemCaller extends BukkitEventRouter<PlayerDropItemEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerDropItemEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerDropItemEvent event = new PlayerDropItemEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerDropItemCaller PlayerDropItem = new PlayerDropItemCaller();
        public class PlayerEggThrowCaller extends BukkitEventRouter<PlayerEggThrowEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerEggThrowEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerEggThrowEvent event = new PlayerEggThrowEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerEggThrowCaller PlayerEggThrow = new PlayerEggThrowCaller();
        public class PlayerExpChangeCaller extends BukkitEventRouter<PlayerExpChangeEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerExpChangeEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerExpChangeEvent event = new PlayerExpChangeEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerExpChangeCaller PlayerExpChange = new PlayerExpChangeCaller();
        public class PlayerFishCaller extends BukkitEventRouter<PlayerFishEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerFishEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerFishEvent event = new PlayerFishEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerFishCaller PlayerFish = new PlayerFishCaller();
        public class PlayerGameModeChangeCaller extends BukkitEventRouter<PlayerGameModeChangeEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerGameModeChangeEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerGameModeChangeEvent event = new PlayerGameModeChangeEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerGameModeChangeCaller PlayerGameModeChange = new PlayerGameModeChangeCaller();
        public class PlayerInteractEntityCaller extends BukkitEventRouter<PlayerInteractEntityEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerInteractEntityEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerInteractEntityEvent event = new PlayerInteractEntityEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerInteractEntityCaller PlayerInteractEntity = new PlayerInteractEntityCaller();
        public class PlayerInteractCaller extends BukkitEventRouter<PlayerInteractEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerInteractEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerInteractEvent event = new PlayerInteractEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerInteractCaller PlayerInteract = new PlayerInteractCaller();
        public class PlayerInventoryCaller extends BukkitEventRouter<PlayerInventoryEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerInventoryEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerInventoryEvent event = new PlayerInventoryEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerInventoryCaller PlayerInventory = new PlayerInventoryCaller();
        public class PlayerItemBreakCaller extends BukkitEventRouter<PlayerItemBreakEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerItemBreakEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerItemBreakEvent event = new PlayerItemBreakEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerItemBreakCaller PlayerItemBreak = new PlayerItemBreakCaller();
        public class PlayerItemHeldCaller extends BukkitEventRouter<PlayerItemHeldEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerItemHeldEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerItemHeldEvent event = new PlayerItemHeldEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerItemHeldCaller PlayerItemHeld = new PlayerItemHeldCaller();
        public class PlayerJoinCaller extends BukkitEventRouter<PlayerJoinEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerJoinEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerJoinEvent event = new PlayerJoinEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerJoinCaller PlayerJoin = new PlayerJoinCaller();
        public class PlayerKickCaller extends BukkitEventRouter<PlayerKickEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerKickEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerKickEvent event = new PlayerKickEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerKickCaller PlayerKick = new PlayerKickCaller();
        public class PlayerLevelChangeCaller extends BukkitEventRouter<PlayerLevelChangeEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerLevelChangeEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerLevelChangeEvent event = new PlayerLevelChangeEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerLevelChangeCaller PlayerLevelChange = new PlayerLevelChangeCaller();
        public class PlayerLoginCaller extends BukkitEventRouter<PlayerLoginEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerLoginEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerLoginEvent event = new PlayerLoginEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerLoginCaller PlayerLogin = new PlayerLoginCaller();
        public class PlayerMoveCaller extends BukkitEventRouter<PlayerMoveEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerMoveEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerMoveEvent event = new PlayerMoveEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerMoveCaller PlayerMove = new PlayerMoveCaller();
        public class PlayerPickupItemCaller extends BukkitEventRouter<PlayerPickupItemEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerPickupItemEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerPickupItemEvent event = new PlayerPickupItemEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerPickupItemCaller PlayerPickupItem = new PlayerPickupItemCaller();
        public class PlayerPortalCaller extends BukkitEventRouter<PlayerPortalEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerPortalEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerPortalEvent event = new PlayerPortalEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerPortalCaller PlayerPortal = new PlayerPortalCaller();
        public class PlayerPreLoginCaller extends BukkitEventRouter<PlayerPreLoginEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerPreLoginEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerPreLoginEvent event = new PlayerPreLoginEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerPreLoginCaller PlayerPreLogin = new PlayerPreLoginCaller();
        public class PlayerQuitCaller extends BukkitEventRouter<PlayerQuitEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerQuitEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerQuitEvent event = new PlayerQuitEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerQuitCaller PlayerQuit = new PlayerQuitCaller();
        public class PlayerRegisterChannelCaller extends BukkitEventRouter<PlayerRegisterChannelEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerRegisterChannelEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerRegisterChannelEvent event = new PlayerRegisterChannelEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerRegisterChannelCaller PlayerRegisterChannel = new PlayerRegisterChannelCaller();
        public class PlayerRespawnCaller extends BukkitEventRouter<PlayerRespawnEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerRespawnEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerRespawnEvent event = new PlayerRespawnEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerRespawnCaller PlayerRespawn = new PlayerRespawnCaller();
        public class PlayerShearEntityCaller extends BukkitEventRouter<PlayerShearEntityEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerShearEntityEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerShearEntityEvent event = new PlayerShearEntityEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerShearEntityCaller PlayerShearEntity = new PlayerShearEntityCaller();
        public class PlayerTeleportCaller extends BukkitEventRouter<PlayerTeleportEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerTeleportEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerTeleportEvent event = new PlayerTeleportEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerTeleportCaller PlayerTeleport = new PlayerTeleportCaller();
        public class PlayerToggleFlightCaller extends BukkitEventRouter<PlayerToggleFlightEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerToggleFlightEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerToggleFlightEvent event = new PlayerToggleFlightEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerToggleFlightCaller PlayerToggleFlight = new PlayerToggleFlightCaller();
        public class PlayerUnregisterChannelCaller extends BukkitEventRouter<PlayerUnregisterChannelEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerUnregisterChannelEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerUnregisterChannelEvent event = new PlayerUnregisterChannelEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerUnregisterChannelCaller PlayerUnregisterChannel = new PlayerUnregisterChannelCaller();
        public class PlayerVelocityCaller extends BukkitEventRouter<PlayerVelocityEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PlayerVelocityEvent> prep, int i, int j, int k, int l, int m, int n) { PlayerVelocityEvent event = new PlayerVelocityEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PlayerVelocityCaller PlayerVelocity = new PlayerVelocityCaller();
    }

    public static class ServerCaller {
        public class MapInitializeCaller extends BukkitEventRouter<MapInitializeEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<MapInitializeEvent> prep, int i, int j, int k, int l, int m, int n) { MapInitializeEvent event = new MapInitializeEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public MapInitializeCaller MapInitialize = new MapInitializeCaller();
        public class PluginDisableCaller extends BukkitEventRouter<PluginDisableEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PluginDisableEvent> prep, int i, int j, int k, int l, int m, int n) { PluginDisableEvent event = new PluginDisableEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PluginDisableCaller PluginDisable = new PluginDisableCaller();
        public class PluginEnableCaller extends BukkitEventRouter<PluginEnableEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PluginEnableEvent> prep, int i, int j, int k, int l, int m, int n) { PluginEnableEvent event = new PluginEnableEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PluginEnableCaller PluginEnable = new PluginEnableCaller();
        public class PluginCaller extends BukkitEventRouter<PluginEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PluginEvent> prep, int i, int j, int k, int l, int m, int n) { PluginEvent event = new PluginEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PluginCaller Plugin = new PluginCaller();
        public class RemoteServerCommandCaller extends BukkitEventRouter<RemoteServerCommandEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<RemoteServerCommandEvent> prep, int i, int j, int k, int l, int m, int n) { RemoteServerCommandEvent event = new RemoteServerCommandEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public RemoteServerCommandCaller RemoteServerCommand = new RemoteServerCommandCaller();
        public class ServerCommandCaller extends BukkitEventRouter<ServerCommandEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ServerCommandEvent> prep, int i, int j, int k, int l, int m, int n) { ServerCommandEvent event = new ServerCommandEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ServerCommandCaller ServerCommand = new ServerCommandCaller();
        public class ServerListPingCaller extends BukkitEventRouter<ServerListPingEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ServerListPingEvent> prep, int i, int j, int k, int l, int m, int n) { ServerListPingEvent event = new ServerListPingEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ServerListPingCaller ServerListPing = new ServerListPingCaller();
        public class ServiceCaller extends BukkitEventRouter<ServiceEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ServiceEvent> prep, int i, int j, int k, int l, int m, int n) { ServiceEvent event = new ServiceEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ServiceCaller Service = new ServiceCaller();
        public class ServiceRegisterCaller extends BukkitEventRouter<ServiceRegisterEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ServiceRegisterEvent> prep, int i, int j, int k, int l, int m, int n) { ServiceRegisterEvent event = new ServiceRegisterEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ServiceRegisterCaller ServiceRegister = new ServiceRegisterCaller();
        public class ServiceUnregisterCaller extends BukkitEventRouter<ServiceUnregisterEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ServiceUnregisterEvent> prep, int i, int j, int k, int l, int m, int n) { ServiceUnregisterEvent event = new ServiceUnregisterEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ServiceUnregisterCaller ServiceUnregister = new ServiceUnregisterCaller();
    }

    public static class VehicleCaller {
        public class VehicleBlockCollisionCaller extends BukkitEventRouter<VehicleBlockCollisionEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleBlockCollisionEvent> prep, int i, int j, int k, int l, int m, int n) { VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public VehicleBlockCollisionCaller VehicleBlockCollision = new VehicleBlockCollisionCaller();
        public class VehicleCollisionCaller extends BukkitEventRouter<VehicleCollisionEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleCollisionEvent> prep, int i, int j, int k, int l, int m, int n) { VehicleCollisionEvent event = new VehicleCollisionEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public VehicleCollisionCaller VehicleCollision = new VehicleCollisionCaller();
        public class VehicleCreateCaller extends BukkitEventRouter<VehicleCreateEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleCreateEvent> prep, int i, int j, int k, int l, int m, int n) { VehicleCreateEvent event = new VehicleCreateEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public VehicleCreateCaller VehicleCreate = new VehicleCreateCaller();
        public class VehicleDamageCaller extends BukkitEventRouter<VehicleDamageEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleDamageEvent> prep, int i, int j, int k, int l, int m, int n) { VehicleDamageEvent event = new VehicleDamageEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public VehicleDamageCaller VehicleDamage = new VehicleDamageCaller();
        public class VehicleDestroyCaller extends BukkitEventRouter<VehicleDestroyEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleDestroyEvent> prep, int i, int j, int k, int l, int m, int n) { VehicleDestroyEvent event = new VehicleDestroyEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public VehicleDestroyCaller VehicleDestroy = new VehicleDestroyCaller();
        public class VehicleEnterCaller extends BukkitEventRouter<VehicleEnterEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleEnterEvent> prep, int i, int j, int k, int l, int m, int n) { VehicleEnterEvent event = new VehicleEnterEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public VehicleEnterCaller VehicleEnter = new VehicleEnterCaller();
        public class VehicleEntryCollisionCaller extends BukkitEventRouter<VehicleEntityCollisionEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleEntityCollisionEvent> prep, int i, int j, int k, int l, int m, int n) { VehicleEntityCollisionEvent event = new VehicleEntityCollisionEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public VehicleEntryCollisionCaller VehicleEntryCollision = new VehicleEntryCollisionCaller();
        public class VehicleExitCaller extends BukkitEventRouter<VehicleExitEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleExitEvent> prep, int i, int j, int k, int l, int m, int n) { VehicleExitEvent event = new VehicleExitEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public VehicleExitCaller VehicleExit = new VehicleExitCaller();
        public class VehicleMoveCaller extends BukkitEventRouter<VehicleMoveEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleMoveEvent> prep, int i, int j, int k, int l, int m, int n) { VehicleMoveEvent event = new VehicleMoveEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public VehicleMoveCaller VehicleMove = new VehicleMoveCaller();
        public class VehicleUpdateCaller extends BukkitEventRouter<VehicleUpdateEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<VehicleUpdateEvent> prep, int i, int j, int k, int l, int m, int n) { VehicleUpdateEvent event = new VehicleUpdateEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public VehicleUpdateCaller VehicleUpdate = new VehicleUpdateCaller();
    }

    public static class WeatherCaller {
        public class LightningStrikeCaller extends BukkitEventRouter<LightningStrikeEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<LightningStrikeEvent> prep, int i, int j, int k, int l, int m, int n) { LightningStrikeEvent event = new LightningStrikeEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public LightningStrikeCaller LightningStrike = new LightningStrikeCaller();
        public class ThunderChangeCaller extends BukkitEventRouter<ThunderChangeEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ThunderChangeEvent> prep, int i, int j, int k, int l, int m, int n) { ThunderChangeEvent event = new ThunderChangeEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ThunderChangeCaller ThunderChange = new ThunderChangeCaller();
        public class WeatherChangeCaller extends BukkitEventRouter<WeatherChangeEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<WeatherChangeEvent> prep, int i, int j, int k, int l, int m, int n) { WeatherChangeEvent event = new WeatherChangeEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public WeatherChangeCaller WeatherChange = new WeatherChangeCaller();
    }

    public static class WorldCaller {
        public class ChunkCaller extends BukkitEventRouter<ChunkEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ChunkEvent> prep, int i, int j, int k, int l, int m, int n) { ChunkEvent event = new ChunkEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ChunkCaller Chunk = new ChunkCaller();
        public class ChunkLoadCaller extends BukkitEventRouter<ChunkLoadEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ChunkLoadEvent> prep, int i, int j, int k, int l, int m, int n) { ChunkLoadEvent event = new ChunkLoadEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ChunkLoadCaller ChunkLoad = new ChunkLoadCaller();
        public class ChunkPopulateCaller extends BukkitEventRouter<ChunkPopulateEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ChunkPopulateEvent> prep, int i, int j, int k, int l, int m, int n) { ChunkPopulateEvent event = new ChunkPopulateEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ChunkPopulateCaller ChunkPopulate = new ChunkPopulateCaller();
        public class ChunkUnloadCaller extends BukkitEventRouter<ChunkUnloadEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<ChunkUnloadEvent> prep, int i, int j, int k, int l, int m, int n) { ChunkUnloadEvent event = new ChunkUnloadEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public ChunkUnloadCaller ChunkUnload = new ChunkUnloadCaller();
        public class PortalCreateCaller extends BukkitEventRouter<PortalCreateEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<PortalCreateEvent> prep, int i, int j, int k, int l, int m, int n) { PortalCreateEvent event = new PortalCreateEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public PortalCreateCaller PortalCreate = new PortalCreateCaller();
        public class SpawnChangeCaller extends BukkitEventRouter<SpawnChangeEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<SpawnChangeEvent> prep, int i, int j, int k, int l, int m, int n) { SpawnChangeEvent event = new SpawnChangeEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public SpawnChangeCaller SpawnChange = new SpawnChangeCaller();
        public class StructureGrowCaller extends BukkitEventRouter<StructureGrowEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<StructureGrowEvent> prep, int i, int j, int k, int l, int m, int n) { StructureGrowEvent event = new StructureGrowEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public StructureGrowCaller StructureGrow = new StructureGrowCaller();
        public class WorldInitCaller extends BukkitEventRouter<WorldInitEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<WorldInitEvent> prep, int i, int j, int k, int l, int m, int n) { WorldInitEvent event = new WorldInitEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public WorldInitCaller WorldInit = new WorldInitCaller();
        public class WorldLoadCaller extends BukkitEventRouter<WorldLoadEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<WorldLoadEvent> prep, int i, int j, int k, int l, int m, int n) { WorldLoadEvent event = new WorldLoadEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public WorldLoadCaller WorldLoad = new WorldLoadCaller();
        public class WorldSaveCaller extends BukkitEventRouter<WorldSaveEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<WorldSaveEvent> prep, int i, int j, int k, int l, int m, int n) { WorldSaveEvent event = new WorldSaveEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public WorldSaveCaller WorldSave = new WorldSaveCaller();
        public class WorldUnloadCaller extends BukkitEventRouter<WorldUnloadEvent> { public void callEvent(boolean initiallyDisabled, BukkitEventPrep<WorldUnloadEvent> prep, int i, int j, int k, int l, int m, int n) { WorldUnloadEvent event = new WorldUnloadEvent(i,j,k,l,m,n); callEvent(event, initiallyDisabled, prep); } } public WorldUnloadCaller WorldUnload = new WorldUnloadCaller();
    }                         */
}
