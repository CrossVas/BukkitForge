# BukkitForge Access Transformer Configuration.
# Suffixing with -f makes something non-final.
# viy: set nobackup nowritebackup :

# CallableMinecraftVersion
public b 

# InventoryCrafting
public vj.c # eventHandler - Container for Inventory

# TileEntityRecordPlayer
public aou.a

# CraftingManager
public aae.b # CraftingManager.recipes - so we can clear recipes.
public-f aae.a # CraftingManager.instance - to reset the CraftingManager
public aae.<init>()V # reset CraftingManager.

# NetServerHandler
public-f jz.a # The underlying network manager for this server handler.

# DedicatedServer
public ir.p # DedicatedServer.settings - to reload the settings of the server

# World
public abv.F # World.spawnPeacefulMobs - world-by-world settings
public abv.E # World.spawnHostileMobs - world-by-world settings
public-f abv.t # World.provider - change environment (bukkit does this, god knows why)

# ServerConfigurationManager
public hm.j # lets us directly load player NBTTagCompounds for reading.

# Entity
# public nm.af # let us get if a creeper is powered or not (Entity.dataWatcher) - use getDataWatcher instead
public nm.d # let us get if an entity is on fire or not

# EntityPotion
public ut.c 

# EntityThrowable
public up.g # lets us set and get an EntityThrowable's throwing entity

# EntityPigZombie
public tm.bs # lets us get and set a PigZombie's anger.

# EntityXPOrb
public nz.e # lets us get and set an XP orb's value.

# EntityLiving
public of.bc # lets us get and set the last damaging EntityPlayer
public of.aS # lets us get/set the last damage amount.
public of.aK # lets us get/set the XP worth of a LivingEntity.
public of.e

# EntityLivingBase
public oe.bc # field_110153_bc
public oe.aS # attackingPlayer

# EntityTracker
public jl.b # trackedEntities
public jl.c # trackedEntityIDs

# EntitySlime
public tr.a(I)V # setSlimeSize

# EntityXPOrb
public nz.e # xpValue

# EntityFireworkRocket
public uj.b # field_92010_b

# BlockDispenser
public anv.j_(Labv;III)V # dispense an item...

# BlockDropper
public anx.j_(Labv;III)V # dispense an item...

# ChunkProviderServer
public jq.b(Lzz;)V # lets us save a __SINGLE__ chunk - safeSaveChunk
public jq.b # lets us inspect chunks to unload
public jq.d # currentChunkProvider
public jq.c # default empty chunk
public jq.f # long hash map of chunks
public jq.g # loaded chunks

# PlayerManager
public jo.a(IIZ)Lil; # getOrCreateChunkWatcher


# PlayerInstance
public jp.b # playersInChunk

# InventoryLargeChest
public mm.b # Upper and lower parts of the chest
public mm.c # <-- (lower part)

# FoodStats
public uw.c # get exhaustionlevel

# PlayerCapabilities
public ub.g # set walk speed

# InventoryRepair
public ub

# ItemInWorldManager
public jv.e # initialDamage
public jv.f # partiallyDestroyedBlockX
public jv.g # partiallyDestroyedBlockY
public jv.h # partiallyDestroyedBlockZ
public jv.i # curblockDamage
public jv.o # durabilityRemainingOnBlock